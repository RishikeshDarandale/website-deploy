#!/usr/bin/env node

const { Command } = require("commander");
const { LambdaClient } = require("@aws-sdk/client-lambda");
const { S3Client } = require("@aws-sdk/client-s3");
const { fromNodeProviderChain } = require("@aws-sdk/credential-providers");
const Logger = require("../libs/logger.js");
const LambdaDeploy = require("../libs/lambda-deploy.js");

const logger = new Logger();
const program = new Command();

// deploy command
program
  .name("update")
  .arguments("<functionName> <zipFilePath>")
  .option("--profile <profileName>", "AWS credential profile name")
  .option("--region <regionName>", "AWS region name", "us-east-1")
  .option("--bucket <bucketName>", "S3 bucket name")
  .option("--prefix <filePrefix>", "S3 file prefix")
  .option("--debug", "Log extra debug information")
  .action(function (functionName, zipFilePath, options) {
    if (options.profile !== undefined) {
      credentials = fromNodeProviderChain({
        profile: options.profile,
      });
    } else {
      credentials = fromNodeProviderChain();
    }
    const lambdaClient = new LambdaClient({
      region: options.region,
      credentials,
    });
    const s3Client = new S3Client({
      region: options.region,
      credentials,
    });
    let lambdaDeploy = new LambdaDeploy(lambdaClient, s3Client);
    try {
      lambdaDeploy.update(functionName, zipFilePath, options);
    } catch (exception) {
      logger.error(exception.message);
      process.exit(1);
    }
  })
  .parse(process.argv);

// display the usage
if (!program.args.length && program.args.length < 3) program.help();
